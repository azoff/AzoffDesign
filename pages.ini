[index]
source=index.html
alias=home
title=The project-driven portfolio of Jonathan Azoff
keywords=home, projects, portfolio
default=1
styles=slider-index.css,clouds.css
scripts=transformjs.1.0.beta.2.min.js,index.js
debug=0

[about]
source=about.html
alias=author
title=About
keywords=author, about
styles=about-white.css
debug=0

[resume]
source=resume.html
alias=work
title=My Resume
keywords=resume,work,xillent,playdom,pixelpipe
styles=paper-notebook.css
scripts=resume.js
debug=0

[contact]
source=contact.html
alias=email
title=Contact
keywords=contact, email, questions
styles=canvasblack-metalstep.css
scripts=jquery.autoresize.js,modal.js,contact.js
debug=0

[404]
source=404.html
title=Page not found
keywords=404, Page not found
styles=wood-leather.css
debug=0

; projects!

[flicka1k]
date=02/18/2012
source=http://azoff.github.com/flicka1K
title=Flicka1K | A JS1K Submission
description=Flicka1K is an experiment in building the smallest possible implementation of a Flickr search interface using modern JavaScript and CSS3. Images are queried by tag, and loaded into a CSS3-powered grid. The final script weighs in at exactly one kilobyte.
debug=0

[changed]
date=11/06/2011
source=changed.html
title=Changed | DOM Change, the way it should've worked
keywords=DOMChange, change, event, simple
description=The DOM "change" event on input-type elements is fundamentally broken. The justification for this claim comes from its inconsistency across different types input elements. Not only is the criteria for triggering the event different across elements, but the value of the element (upon change) may not even be applicable for form submission (i.e. an unchecked checkbox). Hence, Changed was created to address these issues. Changed is a jQuery plugin that extends jQuery's native event set to expose a brand new "changed" event. This new event provides a normalized interface for change across elements. In addition, it also normalizes the value parameter for qualified form elements.
styles=changed.css
scripts=jquery.changed.js,changed.js
debug=0

[autoresize]
date=08/28/2011
source=autoresize.html
title=AutoResize | Automatically resize textareas on input
keywords=fields, size, automatic, input, form
description=AutoResize is a very basic jQuery plug-in that provides an "automatic resize" effect on textarea elements. When a user types text into an autoresized textarea, the textarea resizes itself to make sure all of the input text remains visible. Unlike other plug-ins that attempt to solve the same problem, AutoResize does not rely on obtrusive cloned elements or buggy init states. Instead, it uses plain old DOM scrollHeight analysis, with careful adjustments to ensure consistent execution across browsers.
styles=autoresize.css
scripts=jquery.autoresize.js,autoresize.js
debug=0

[jwave]
date=03/31/2010
source=jwave.html
alias=plugins/js/jwave
title=jWave | Easily embed Google Wave with jQuery
keywords=google, wave, google wave, embed, jQuery, plug-in
description=jWave is a small jQuery plug-in that facilitates the embedding of Google Wave into a blog or website. jWave only depends on jQuery, and loads the rest of its requirements dynamically, checking first to see if they exist. To use jWave, simply follow the instructions on this page. For power users, the API documentation below will allow full control over the appearence and behavior of the embedded wave. 
styles=jwave-beach.css
scripts=jquery.jwave.js,jwave.js
debug=0

[piano]
date=04/12/2010
source=piano.html
alias=html5piano
title=The HTML5 Piano | A piano that runs in your browser
keywords=piano, grand piano, html5, javascript, modern browsers
description=Interested in getting a taste of what modern browsers can do? Enter The HTML5 Piano. This little JavaScript plug-in creates a keyboard piano that runs in your browser without any dependence on external plug-ins! Simply mouse down on a key to play a note or use the keyboard for total control. As a note, the piano does depend on draft-based technology, which is currently only supported by a subset of browsers. Luckily for you, checking for this dependency is not a requirement for implementation. Simply install the plug-in into your personal project or application and the Piano will gracefully handle browser requirement detection.
styles=grand-piano.css
scripts=html5piano.js,piano.js
debug=0

[overscroll]
date=05/09/2010
source=overscroll.html
alias=plugins/js/overscroll
title=Overscroll | An iOS scrolling emulator for jQuery
keywords=scrolling, iphone, ipad, apple, jquery, javascript, plugin, plug-in
description=Overscroll is a jQuery plug-in that mimics the iphone/ipad scrolling experience in a browser. The plug-in adds a draggable drift to overflowed DOM elements as well as a set of fading 'thumbs'. OverScroll runs best on Safari 5+, Chrome 5+, and Firefox 3+ but should run just fine on most modern browsers. Below you can find an interactive demo of overscroll in action, as well as instructions on how to integrate it into your web application. For full API documentation, check out the README file.
styles=overscroll-apple.css
scripts=jquery.overscroll.js,overscroll.js
debug=0